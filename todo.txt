


Architektur für Tasks erstellen

Ort hat drei Stufen, innerhalb deren Tasks erledigt werden können

Ortslage zwischen -15 und +15
Tasks folgednermassen:

Wenn Ortslage > 5
  - Verteidigen wenn X
    --> Erhöht Sicherheit


Wenn Ortslage >=-5 && <=5
  - Wiederaufbau
    --> Erhöht Humanitäre Lage

  - Humanitäre Hilfe
    --> Erhöht Humanitäre Lage

  - Patrouille
    --> Erhöht Sicherheit

  - Gesprächsaufklärung
    --> Gesprächsaufklärung kann Untertask der Ortschaft auslösen



Wenn Ortslage < -5
  - Angreifen
    --> Erhöht Sicherheit




Fncs:

  [taskID, true] call BIS_fnc_deleteTask

  _exists = ["MyTask"] call BIS_fnc_taskExists;



Mods updaten und Keys fixxen

Bestellbare Sachen überarbeiten


[_player] onMapSingleClick {
  params ["_this", "_pos", "_units", "_shift", "_alt"];
  _this params ["_player"];
  hint "pfh running";

  //pfh, um zu tracken, ob Map offen ist
  [
    {
      params ["_args", "_handle"];
      if (visibleMap) exitWith {};
      onMapSingleClick "";
      [_handle] call CBA_fnc_removePerFrameHandler;
      hint "handle removed";
    },
    0,
    []
  ] call CBA_fnc_addPerFrameHandler;
};


Parameters:
	0: OBJECT - object action is attached to
	1: STRING - action title text shown in action menu
	2: STRING or CODE - idle icon shown on screen; if CODE is used the code needs to return the path to icon
	3: STRING or CODE - progress icon shown on screen; if CODE is used the code needs to return the path to icon
	4: STRING - condition for the action to be shown; special variables passed to the script code are _target (unit to which action is attached to) and _this (caller/executing unit)
	5: STRING - condition for action to progress; if false is returned action progress is halted; arguments passed into it are: _target, _caller, _id, _arguments
	6: CODE - code executed on start; arguments passed into it are [target, caller, ID, arguments]
		0: OBJECT - target (_this select 0) - the object which the action is assigned to
		1: OBJECT - caller (_this select 1) - the unit that activated the action
		2: NUMBER - ID (_this select 2) - ID of the activated action (same as ID returned by addAction)
		3: ARRAY - arguments (_this select 3) - arguments given to the script if you are using the extended syntax
	7: CODE - code executed on every progress tick; arguments [target, caller, ID, arguments, currentProgress]; max progress is always 24
	8: CODE - code executed on completion; arguments [target, caller, ID, arguments]
	9: CODE - code executed on interrupted; arguments [target, caller, ID, arguments]
	10: ARRAY - arguments passed to the scripts
	11: NUMBER - action duration; how much time it takes to complete the action
	12: NUMBER - priority; actions are arranged in descending order according to this value
	13: BOOL - remove on completion (default: true)
	14: BOOL - show in unconscious state (default: false)
	15: BOOL - show on screen; if false action needs to be selected from action menu to appear on screen (default: true)
